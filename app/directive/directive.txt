Creating Directives

Much like controllers, directives are registered on modules. To register a directive, you use the module.directive 
API. module.directive takes the normalized directive name followed by a factory function. 
This factory function should return an object with the different options

Best Practice: In order to avoid collisions with some future standard, it's best to prefix your own directive names.
For instance, if you created a <carousel> directive, it would be problematic if HTML7 introduced the same element.
A two or three letter prefix (e.g. btfCarousel) works well. 
Similarly, do not prefix your own directives with ng or they might conflict with directives included in a
future version of AngularJS.

Note: When you create a directive, it is restricted to attribute and elements only by default. 
In order to create directives that are triggered by class name, you need to use the restrict option.

The restrict option is typically set to:

'A' - only matches attribute name
'E' - only matches element name
'C' - only matches class name
'M' - only matches comment
These restrictions can all be combined as needed:

'AEC' - matches either attribute or element or class name

When should I use an attribute versus an element? Use an element when you are creating a component that is
in control of the template. The common case for this is when you are creating a Domain-Specific Language
for parts of your template.
Use an attribute when you are decorating an existing element with new functionality.

 return {
    restrict: 'E',
    scope: {
      customerInfo: '=info'
    },
    templateUrl: 'my-customer-iso.html'
  };

  ...
scope: {
  // same as '=customer'
  customer: '='
},
...

Best Practice: Use the scope option to create
isolate scopes when making components that you want to reuse throughout your app.

Creating a Directive that Wraps Other Elements
 return {
    restrict: 'E',
    transclude: true,
    scope: {},
    templateUrl: 'my-dialog.html'
  };


  HTML
  <div class="alert" ng-transclude></div>

<div ng-controller="Controller">
  <my-dialog>Check out the contents, {{name}}!</my-dialog>
</div>

Best Practice: only use transclude: true when you want to create a directive that wraps arbitrary content.



return {
    restrict: 'E',
    transclude: true,
    scope: {
      'close': '&onClose'
    },
    templateUrl: 'my-dialog-close.html'
  };

  <div ng-controller="Controller">
  {{message}}
  <my-dialog ng-hide="dialogIsHidden" on-close="hideDialog(message)">
    Check out the contents, {{name}}!
  </my-dialog>
</div>

<div class="alert">
  <a href class="close" ng-click="close({message: 'closing for now'})">&times;</a>
  <div ng-transclude></div>
</div>

{
    link: function(scope, element, attr) {
    }
}